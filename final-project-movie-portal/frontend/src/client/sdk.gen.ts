// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { DeleteUserData, DeleteUserResponses, GetUserByIdData, GetUserByIdResponses, UpdateUserData, UpdateUserResponses, RemoveFromWatchlistData, RemoveFromWatchlistResponses, AddToWatchlistData, AddToWatchlistResponses, UnfavoriteMovieData, UnfavoriteMovieResponses, FavoriteMovieData, FavoriteMovieResponses, DeleteMovieData, DeleteMovieResponses, GetMovieByIdData, GetMovieByIdResponses, UpdateMovieData, UpdateMovieResponses, DeleteDirectorData, DeleteDirectorResponses, GetDirectorByIdData, GetDirectorByIdResponses, UpdateDirectorData, UpdateDirectorResponses, GetAllMoviesData, GetAllMoviesResponses, CreateMovieData, CreateMovieResponses, GetAllDirectorsData, GetAllDirectorsResponses, CreateDirectorData, CreateDirectorResponses, RegisterData, RegisterResponses, LoginData, LoginResponses, GetUserWatchlistData, GetUserWatchlistResponses, GetUserFavoritesData, GetUserFavoritesResponses, GetMeData, GetMeResponses, GetAllUsersData, GetAllUsersResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const removeFromWatchlist = <ThrowOnError extends boolean = false>(options: Options<RemoveFromWatchlistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveFromWatchlistResponses, unknown, ThrowOnError>({
        url: '/users/movie/watchlist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const addToWatchlist = <ThrowOnError extends boolean = false>(options: Options<AddToWatchlistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddToWatchlistResponses, unknown, ThrowOnError>({
        url: '/users/movie/watchlist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const unfavoriteMovie = <ThrowOnError extends boolean = false>(options: Options<UnfavoriteMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnfavoriteMovieResponses, unknown, ThrowOnError>({
        url: '/users/movie/favorite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const favoriteMovie = <ThrowOnError extends boolean = false>(options: Options<FavoriteMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<FavoriteMovieResponses, unknown, ThrowOnError>({
        url: '/users/movie/favorite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteMovie = <ThrowOnError extends boolean = false>(options: Options<DeleteMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMovieResponses, unknown, ThrowOnError>({
        url: '/movies/{id}',
        ...options
    });
};

export const getMovieById = <ThrowOnError extends boolean = false>(options: Options<GetMovieByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMovieByIdResponses, unknown, ThrowOnError>({
        url: '/movies/{id}',
        ...options
    });
};

export const updateMovie = <ThrowOnError extends boolean = false>(options: Options<UpdateMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMovieResponses, unknown, ThrowOnError>({
        url: '/movies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteDirector = <ThrowOnError extends boolean = false>(options: Options<DeleteDirectorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDirectorResponses, unknown, ThrowOnError>({
        url: '/directors/{id}',
        ...options
    });
};

export const getDirectorById = <ThrowOnError extends boolean = false>(options: Options<GetDirectorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDirectorByIdResponses, unknown, ThrowOnError>({
        url: '/directors/{id}',
        ...options
    });
};

export const updateDirector = <ThrowOnError extends boolean = false>(options: Options<UpdateDirectorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateDirectorResponses, unknown, ThrowOnError>({
        url: '/directors/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllMovies = <ThrowOnError extends boolean = false>(options?: Options<GetAllMoviesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllMoviesResponses, unknown, ThrowOnError>({
        url: '/movies',
        ...options
    });
};

export const createMovie = <ThrowOnError extends boolean = false>(options: Options<CreateMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMovieResponses, unknown, ThrowOnError>({
        url: '/movies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllDirectors = <ThrowOnError extends boolean = false>(options: Options<GetAllDirectorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllDirectorsResponses, unknown, ThrowOnError>({
        url: '/directors',
        ...options
    });
};

export const createDirector = <ThrowOnError extends boolean = false>(options: Options<CreateDirectorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDirectorResponses, unknown, ThrowOnError>({
        url: '/directors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, unknown, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserWatchlist = <ThrowOnError extends boolean = false>(options: Options<GetUserWatchlistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserWatchlistResponses, unknown, ThrowOnError>({
        url: '/users/{id}/watchlist',
        ...options
    });
};

export const getUserFavorites = <ThrowOnError extends boolean = false>(options: Options<GetUserFavoritesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserFavoritesResponses, unknown, ThrowOnError>({
        url: '/users/{id}/favorites',
        ...options
    });
};

export const getMe = <ThrowOnError extends boolean = false>(options?: Options<GetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeResponses, unknown, ThrowOnError>({
        url: '/users/me',
        ...options
    });
};

export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersResponses, unknown, ThrowOnError>({
        url: '/users/',
        ...options
    });
};